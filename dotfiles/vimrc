call pathogen#infect()

set nu
set rnu

set mouse=a
set shortmess+=I

let mapleader = ","

set noswapfile
set nobackup

set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab

set incsearch
set hlsearch
set ignorecase
set smartcase

colorscheme molokai
set background=dark
let g:molokai_original = 1
let g:rehash256 = 1
syntax enable
set laststatus=2
set noshowmode
set listchars=tab:\|\ ,trail:Â·
set list

set lazyredraw
set autoread
set autowrite
set nowrap

set splitbelow
set splitright
autocmd VimResized * wincmd =

set wildmenu
set confirm
set cmdheight=1

set foldenable
set foldlevelstart=10
set foldnestmax=10
nnoremap <space> za
set foldmethod=indent

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 

if v:version > 703 || v:version == 703 && has('patch541')
	set formatoptions+=j
endif

nnoremap D dd
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_
nnoremap <BS> {
map <F7> :NERDTreeToggle<CR>
map q: :q
nnoremap <silent> <F5> :source ~/.vimrc<CR>

imap <c-x><c-l> <plug>(fzf-complete-line)
map <leader>p :Files<CR>
map <leader>f :Find<space>
command! -bang -nargs=* Find call fzf#vim#grep( 'rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

augroup resCur
	autocmd!
	autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

map <C-n> :cn<CR>
map <C-m> :cp<CR>
nnoremap <leader>a :cclose<CR>

augroup quickfix
	autocmd!
	autocmd FileType qf wincmd J
	autocmd FileType qf setlocal wrap
augroup END

filetype plugin on
filetype plugin indent on

autocmd BufEnter *.tex :setlocal filetype=tex

autocmd FileType tex setlocal spell
autocmd FileType tex setlocal spelllang=en_gb
autocmd FileType tex syntax spell toplevel

autocmd FileType tex inoremap ;bf    \textbf{}<Esc>T{i
autocmd FileType tex inoremap ;if    \textit{}<Esc>T{i
autocmd FileType tex inoremap ;tf    \texttt{}<Esc>T{i
autocmd FileType tex inoremap ;"     ``''<Esc>2ha
autocmd FileType tex inoremap ;cal   \mathcal{}<Esc>T{i
autocmd FileType tex inoremap ;mbf   \mathbf{}<Esc>T{i
autocmd FileType tex inoremap ;sec   \section{}<Esc>T{i
autocmd FileType tex inoremap ;ssec  \subsection{}<Esc>T{i
autocmd FileType tex inoremap ;sssec \subsubsection{}<Esc>T{i
autocmd FileType tex inoremap ;lst   \begin{lstlisting}<Enter><Enter>\end{lstlisting}<Esc>kA<Space>
autocmd FileType tex inoremap ;desc  \begin{description}<Enter><Enter>\end{description}<Esc>kA<Tab>\item []<Space><Esc>T[i
autocmd FileType tex inoremap ;enum  \begin{enumerate}<Enter><Enter>\end{enumerate}<Esc>kA<Tab>\item<Space>
autocmd FileType tex inoremap ;item  \begin{itemize}<Enter><Enter>\end{itemize}<Esc>kA<Tab>\item<Space>
autocmd FileType tex inoremap ;li    \item<Space>
autocmd FileType tex inoremap ;di    \item<Space>[]<Space><Esc>T[i
autocmd FileType tex inoremap ;fig   \begin{figure}[htbp]<Enter><Tab>\centering<Enter><Tab>\includegraphics[scale=0.5]{TODO}<Enter><Tab>\caption{TODO}<Enter><Tab>\label{fig:TODO}<Enter>\end{figure}<Enter>
autocmd FileType tex inoremap ;tab   \begin{table}[h]<Enter><Tab>\begin{center}<Enter><Tab><Tab>\begin{tabular}{TODO}<Enter><Tab><Tab>\end{tabular}<Enter><Tab>\caption{\label{tab:TODO}TODO}<Enter><Tab>\end{center}<Enter>\end{table}<Enter>

let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
let g:go_guru_scope = ["..."]
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_types = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_doc_url = 'http://localhost:6060'
let g:go_list_type = "quickfix"
let g:go_info_mode = "guru"
let g:go_metalinter_autosave_enabled = ['vet', 'golint']

function! s:build_go_files()
	let l:file = expand('%')
	if l:file =~# '^\f\+_test\.go$'
		call go#test#Test(0, 1)
		elseif l:file =~# '^\f\+\.go$'
		call go#cmd#Build(0)
	endif
endfunction

autocmd FileType go nmap <silent> <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <silent> <leader>r <Plug>(go-referrers)
autocmd FileType go nmap <silent> <leader>t <Plug>(go-test)
autocmd FileType go nmap <silent> <leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <silent> <leader>l <Plug>(go-metalinter)
autocmd Filetype go nmap <silent> <leader>v :vsp <CR>:exe "GoDef"<CR>
autocmd Filetype go nmap <silent> <leader>s :sp  <CR>:exe "GoDef"<CR>
autocmd Filetype go nmap <C-g> :GoDecls<cr>
autocmd Filetype go imap <C-g> <esc>:<C-u>GoDecls<cr>
autocmd Filetype go command! -bang A call  go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go nnoremap <F8> :TagbarToggle<CR>

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }
