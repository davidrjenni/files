# If not running interactively, don't do anything
[[ $- != *i* ]] && return

if [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

complete -cf man
complete -cf sudo
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

function acmef() {
	sh -c "nohup sh -c 'acme -l /Users/dave/acme.dump -a -f /mnt/font/GoRegular/15a/font &>/dev/null' &>/dev/null &"
	sh -c "nohup sh -c 'sleep 2 && acmego -f &>/dev/null' &>/dev/null &"
}

PS1="\$(git_branch)% "

function extract() {
	if [ -f $1 ]; then
		case $1 in
		*.tar.bz2)  tar xjf    $1 ;;
		*.tbz2)     tar xjf    $1 ;;
		*.tar.gz)   tar xzf    $1 ;;
		*.tgz)      tar xzf    $1 ;;
		*.tar.xz)   tar xJf    $1 ;;
		*.tar)      tar xf     $1 ;;
		*.bz2)      bunzip2    $1 ;;
		*.gz)       gunzip     $1 ;;
		*.rar)      unrar x    $1 ;;
		*.zip)      unzip      $1 ;;
		*.Z)        uncompress $1 ;;
		*)          echo "cannot extract '$1'" ;;
		esac
	else
		echo "invalid file: '$1'"
	fi
}

function gpr() {
	id=$1
	if [ -z $id ]; then
		echo "Need PR number as argument"
		return 1
	fi
	git fetch origin pull/${id}/head:pr-${id}
	git checkout pr-${id}
}

cdg() {
	t=`pwd`
	while ! [ -d .git ]; do
		cd ..
	done
	OLDPWD=$t
}

install_go_tools() {
	tools=(
		'golang.org/x/tools/cmd/goimports'
		'golang.org/x/tools/cmd/gorename'
		'golang.org/x/tools/cmd/stringer'
		'golang.org/x/tools/cmd/guru'
		'golang.org/x/review/git-codereview'
		'golang.org/x/perf/cmd/benchstat'
		'github.com/alecthomas/gometalinter'
		'github.com/eaburns/Watch'
		'9fans.net/go/acme/editinacme'
		'9fans.net/go/acme/acmego'
		'github.com/davidrjenni/A'
		'github.com/josharian/impl'
		'github.com/godoctor/godoctor'
		'github.com/zmb3/gogetdoc'
		'github.com/fatih/gomodifytags'
	)
	for tool in "${tools[@]}"; do
		go get -u $tool
	done
}

git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

ghci() {
	eval "$(docker-machine env default)"
	docker run --rm -it -v $(pwd):/c haskell
}

swipl() {
	eval "$(docker-machine env default)"
	docker run --rm -it -v $(pwd):/data davidrjenni/prolog
}

octave() {
	eval "$(docker-machine env default)"
	docker run --rm -it -v $(pwd):/data davidrjenni/octave
}

go1.7() {
	GOROOT=~/go1.7 ~/go1.7/bin/go $@
}

go1.8() {
	GOROOT=~/go1.8.3 ~/go1.8.3/bin/go $@
}

deps() {
	go list -f '{{ join .Deps  "\n"}}' .
}

why() {
	echo why not?
}

shopt -s autocd

HISTSIZE=
HISTFILESIZE=
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

if [ $TERM == "dumb" ]; then
	export PAGER=nobs
	export EDITOR=editinacme
	export FCEDIT=$EDITOR
	export VISUAL=$EDITOR
	rc
fi
